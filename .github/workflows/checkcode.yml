name: Check Code

on:
  push:
    branches:
      - '*'
      - '!staging.tmp'
    tags:
      - '*'

jobs:
  test:
    name: "Test"

    strategy:
      matrix:
        platform: [
          ubuntu-latest,
          macos-latest,
          windows-latest
        ]

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15

    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v1

    - name: Install Rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
        echo ::add-path::$HOME/.cargo/bin
      if: runner.os == 'macOS'

    - name: "Print Rust Version"
      run: |
        rustc -Vv
        cargo -Vv
    - name: "Build for Linux"
      if: runner.os == 'Linux'
      run: |
        cargo build
        cargo test
    - name: "Build for macOS"
      if: runner.os == 'macOS'
      run: |
        cargo build
        cargo test
    - name: "Build for Windows"
      if: runner.os == 'Windows'
      run: |
        cargo build
        cargo test

  check_formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v1
    - name: "Use the latest Rust stable with rustfmt"
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true
    - run: cargo fmt -- --check

  check_clippy:
    name: "Check Clippy"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v1
    - name: "Use the latest Rust stable with clippy"
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
          components: clippy
          override: true
    - run: cargo clippy
